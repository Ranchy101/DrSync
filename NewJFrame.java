import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.sql.*;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author gsr75090
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    String currDir = System.getProperty("user.dir");
ActionListener taskPerformer = new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                //...Perform a task...

                dispose();
            }
        };
        Timer timer = new Timer(600000 ,taskPerformer);
        
    public NewJFrame() throws IOException {
        initComponents();
        
        Boolean Beat=false;
        Runtime.getRuntime().exec(currDir+"\\SimulANT+ 2.3.0\\SimulANT+\\SimulANT+.exe", null, new File(currDir+"\\SimulANT+ 2.3.0\\SimulANT+\\"));
         
        timer.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayResults = new javax.swing.JTextArea();
        Header = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        Heartrate = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ID = new javax.swing.JTextField();
        FirstName = new javax.swing.JTextField();
        Surname = new javax.swing.JTextField();
        RoomNum = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        DisplayResults.setColumns(20);
        DisplayResults.setRows(5);
        DisplayResults.setText("\t1. Choose a sensor\n\t2. Start logging\n\t3. Turn on sensor\n\n         RESULTS WILL APPEAR HERE");
        jScrollPane1.setViewportView(DisplayResults);

        Header.setText("Dr Sync data app");

        jButton1.setText("jButton1");

        Heartrate.setText("Heart Rate");
        Heartrate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HeartrateActionPerformed(evt);
            }
        });

        jButton2.setText("jButton1");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ID.setText("Patient ID");

        FirstName.setText("Patient Firstname");
        FirstName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNameActionPerformed(evt);
            }
        });

        Surname.setText("Patient Surname");

        RoomNum.setText("Room Number");
        RoomNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RoomNumActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Header, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(RoomNum)
                            .addComponent(Surname)
                            .addComponent(FirstName, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(Heartrate)
                    .addComponent(jButton2))
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(Header)
                        .addGap(16, 16, 16)
                        .addComponent(ID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Surname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RoomNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(Heartrate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void HeartrateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HeartrateActionPerformed

        try {
            timer.restart();
            Header.setText("hi");
            //---------------------------------------------JDBC MySQL Setup-------------------------------------------------------------------------
            Class.forName("com.mysql.cj.jdbc.Driver");
            String url = "jdbc:mysql://database-1.cqwrgzkfrky6.us-west-2.rds.amazonaws.com/SyncData";
            String user = "admin";
            String password = "get-blame-lateral";
            //---------------------------------------------PATIENT NAME INPUT-------------------------------------------------------------------------
            Scanner sc = new Scanner(System.in);
            System.out.println("Enter Patient ID: ");
            String patientID = ID.getText();
            System.out.println("Enter patient last name:");
            String lastName = Surname.getText();
            System.out.println("Enter patient first name:");
            String firstName = FirstName.getText();
            System.out.println("Enter patient room number:");
            String room = RoomNum.getText();
            //once finished
            //kept for legacy reasons, should not be needed but if it doesn't work, comment out text wrapped with //### and ###//, uncomment these
           // String currDir = System.getProperty("user.dir");
           // Runtime.getRuntime().exec(currDir+"\\SimulANT+ 2.3.0\\SimulANT+\\SimulANT+.exe", null, new File(currDir+"\\SimulANT+ 2.3.0\\SimulANT+\\"));
            //----------------------------------------------PRODUCT VERIFICATION-------------------------------------------------------------------------
                        File events = new File(currDir+"\\SimulANT+ 2.3.0\\SimulANT+\\SimulANT+ Logs - logs\\Heart Rate Display Events.txt");
                        if (events.delete()) {
                            System.out.println("Deleting old logs...");
                            System.out.println("Start logging now.");
                            Thread.sleep(10000);
                            System.out.println("Turn on the heart rate monitor");
                            Thread.sleep(15000);
                            String word = "53848";
                            boolean flag = false;
                            int count = 0;
                            Scanner sc2 = new Scanner(new FileInputStream(currDir+"\\SimulANT+ 2.3.0\\SimulANT+\\SimulANT+ Logs - logs\\Heart Rate Display Events.txt"));
                            while(sc2.hasNextLine()) {
                                String line = sc2.nextLine();
                                if(line.indexOf(word)!=-1) {
                                    flag = true;
                                    count = count+1;
                                }
                            }
                            if(flag) {
                                System.out.println("Product ID Verification Successful");
                                //Correct Product ID
                                //do nothing
                            } else {
                                System.out.println("Product ID Verification Failure");
                                //terminate program
                            }
                        }
                        else {
                            System.out.println("Failed to delete old logs. Logging must be stopped first on SimulANT+ first.");
                            System.out.println("Terminating Program...");
                            //return;
                        }   //------------------------------------------------------------------------------------------------------------------------------------------
                        @SuppressWarnings("resource")
                                int[] heartArray = new int[10];//declare avg array
                        int index = 0;
                        while(true) {
                            long millis = System.currentTimeMillis();
                            //code to run every 1000 ms (1 second)
                            RandomAccessFile fileHandler = null;
                            try {
                                File file = new File(currDir+"\\SimulANT+ 2.3.0\\SimulANT+\\SimulANT+ Logs - logs\\Heart Rate Display ANT Messages.txt");
                                fileHandler = new RandomAccessFile( file, "r" );
                                long fileLength = fileHandler.length() - 1;
                                StringBuilder sb = new StringBuilder();
                                for(long filePointer = fileLength; filePointer != -1; filePointer--){
                                    fileHandler.seek( filePointer );
                                    int readByte = fileHandler.readByte();
                                    
                                    if( readByte == 0xA ) {
                                        if( filePointer == fileLength ) {
                                            continue;
                                        }
                                        break;
                                    } else if( readByte == 0xD ) {
                                        if( filePointer == fileLength - 1 ) {
                                            continue;
                                        }
                                        break;
                                    }
                                    sb.append( ( char ) readByte );
                                }
                                String lastLine = sb.reverse().toString(); //get last line
                                if (lastLine.contains("fail") || lastLine.contains("search")) {
                                    //do nothing
                                }
                                else if (lastLine.contains("closed")) {
                                    System.out.println("Device shut off");
                                }
                                else {
                                    String hexString = lastLine.substring(lastLine.length() - 3);
                                    String hex = hexString.replaceAll("]","");    //get heartrate hex value
                                    int heartrate = Integer.parseInt(hex,16);  //convert to decimal
                                    System.out.println(heartrate); //print heartrate for testing
                                    heartArray[index] = heartrate;//add to array
                                    index++; //only goes up if not fail
                                }
                                //if array full, print avg
                                if (index == 10) {
                                    //get average of array
                                    int total = 0;
                                    for(int i=0; i<heartArray.length; i++){
                                        total = total + heartArray[i];
                                    }
                                    int avg = total / heartArray.length;
                                    DisplayResults.setText("Average: " + avg); //print avg
                                    String query = "insert into PatientData" +
                                            "(lastName, firstName, roomNumber, heartrate, patientID) " +
                                            "values ('"+lastName+"', '"+firstName+"', '"+room+"', "+avg+",'"+patientID+"' )";
                                    Connection connection = DriverManager.getConnection(url, user, password);
                                    Statement statement = connection.createStatement();
                                    statement.executeUpdate(query);
                                    statement.close();
                                    connection.close();
                                    index = 0; //reset index (no need to wipe array as it will be overwritten)
                                    if (avg < 60 || avg > 100)
                                        DisplayResults.setText("WARNING");
                                    break;
                                    
                                }
                                
                            } catch( java.io.FileNotFoundException e ) {
                               // e.printStackTrace();
                                //return null;
                            } catch( java.io.IOException e ) {
                                //e.printStackTrace();
                                //return null;
                            } catch (SQLException ex) {
                                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                            } finally {
                                if (fileHandler != null )
                                    try {
                                        fileHandler.close();
                                    } catch (IOException e) {
                                        /* ignore */
                                    }
                            }
                            Thread.sleep(1000 - millis % 1000);
                        }//timer
            } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_HeartrateActionPerformed

    private void FirstNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FirstNameActionPerformed

    private void RoomNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RoomNumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RoomNumActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        timer.restart();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new NewJFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea DisplayResults;
    private javax.swing.JTextField FirstName;
    private javax.swing.JLabel Header;
    private javax.swing.JButton Heartrate;
    private javax.swing.JTextField ID;
    private javax.swing.JTextField RoomNum;
    private javax.swing.JTextField Surname;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
