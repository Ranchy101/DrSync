/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;
 */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.RandomAccessFile;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Groe
 */
public class NewJFrame extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(177, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(98, 98, 98))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         PrintWriter writer = null;
        try {
            // TODO add your handling code here:
            //---------------------------------------------PATIENT NAME INPUT-------------------------------------------------------------------------
    		Scanner sc = new Scanner(System.in);  
    		System.out.println("Enter patient last name:");
    		String lastName = sc.nextLine();
    		System.out.println("Enter patient first name:");
    		String firstName = sc.nextLine();
    		System.out.println("Enter patient room number: ");
    		String room = sc.nextLine();
    		//once finished
    		sc.close();
            
            
            ////////////////////////////genericize these!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Not everyone has access to daniel's directory's
            
            try {
               Runtime.getRuntime().exec("C:\\Users\\Daniel\\eclipse-workspace\\heartrate\\SimulANT+ 2.3.0\\SimulANT+\\SimulANT+.exe", null, new File("C:\\Users\\Daniel\\eclipse-workspace\\heartrate\\SimulANT+ 2.3.0\\SimulANT+\\"));
            } catch (IOException ex) {
                Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            ////////////////////////////////////////
            //----------------------------------------------PRODUCT VERIFICATION-------------------------------------------------------------------------
            File events = new File("C:\\Users\\Daniel\\eclipse-workspace\\heartrate\\SimulANT+ 2.3.0\\SimulANT+\\SimulANT+ Logs - logs\\Heart Rate Display Events.txt");
            
            if (events.delete()) {
                try {
                    System.out.println("Deleting old logs...");
                    System.out.println("Start logging now.");
                    Thread.sleep(10000);
                    System.out.println("Turn on the heart rate monitor");
                    Thread.sleep(15000);
                    String word = "53848";
                    boolean flag = false;
                    int count = 0;
                    Scanner sc2 = new Scanner(new FileInputStream("Heart Rate Display Events.txt"));
                    while(sc2.hasNextLine()) {
                        String line = sc2.nextLine();
                        if(line.indexOf(word)!=-1) {
                            flag = true;
                            count = count+1;
                        }
                    }
                    if(flag) {
                        System.out.println("Product ID Verification Successful");
                        //Correct Product ID
                        //do nothing
                    } else {
                        System.out.println("Product ID Verification Failure");
                        //terminate program
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            else {
                System.out.println("Failed to delete old logs. Logging must be stopped first on SimulANT+ first.");
                System.out.println("Terminating Program...");
                return;
            }
            //------------------------------------------------------------------------------------------------------------------------------------------
            writer = new PrintWriter("Patient Data.txt", "UTF-8"); // create printable txt file
            int[] heartArray = new int[10];//declare avg array
            int index = 0;
            while(true) {
                long millis = System.currentTimeMillis();
                //code to run every 1000 ms (1 second)
                RandomAccessFile fileHandler = null;
                try {
                    //File file = new File("Heart Rate Display ANT Messages.txt");
                    fileHandler = new RandomAccessFile( "Heart_Rate_Display_ANT_Messages.txt", "r" );
                    long fileLength = fileHandler.length() - 1;
                    StringBuilder sb = new StringBuilder();
                    
                    for(long filePointer = fileLength; filePointer != -1; filePointer--){
                        fileHandler.seek( filePointer );
                        int readByte = fileHandler.readByte();
                        
                        if( readByte == 0xA ) {
                            if( filePointer == fileLength ) {
                                continue;
                            }
                            break;
                            
                        } else if( readByte == 0xD ) {
                            if( filePointer == fileLength - 1 ) {
                                continue;
                            }
                            break;
                        }
                        
                        sb.append( ( char ) readByte );
                    }
                    
                    String lastLine = sb.reverse().toString(); //get last line
                    if (lastLine.contains("fail") || lastLine.contains("search")) {
                        //do nothing
                    }
                    else if (lastLine.contains("closed")) {
                        System.out.println("Device shut off");
                        //break;
                    }
                    else {
                        String hexString = lastLine.substring(lastLine.length() - 3);
                        String hex = hexString.replaceAll("]","");    //get heartrate hex value
                        int heartrate = Integer.parseInt(hex,16);  //convert to decimal
                        System.out.println(heartrate); //print heartrate
                        heartArray[index] = heartrate;//add to array
                        index++; //only goes up if not fail
                    }
                    //if array full, print avg
                    if (index == 10) {
                        //get average of array
                        int total = 0;
                        for(int i=0; i<heartArray.length; i++){
                            total = total + heartArray[i];
                        }
                        int avg = total / heartArray.length;
                        System.out.println("Average: " + avg); //print avg
                        writer.println(name);
                        writer.println(avg); //print avg to file
                        writer.flush();
                        index = 0; //reset index (no need to wipe array as it will be overwritten)
                        if (avg < 60 || avg > 100)
                            System.out.println("WARNING");
                        try {
                            Thread.sleep(10000);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                        
                    }
                    
                } catch( java.io.FileNotFoundException e ) {
                    e.printStackTrace();
                    //return null;
                } catch( java.io.IOException e ) {
                    e.printStackTrace();
                    //return null;
                } finally {
                    if (fileHandler != null )
                        try {
                            fileHandler.close();
                        } catch (IOException e) {
                            /* ignore */
                        }
                }
                Thread.sleep(1000 - millis % 1000);
            }//timer
        } //main
 catch (FileNotFoundException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(NewJFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            writer.close();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
